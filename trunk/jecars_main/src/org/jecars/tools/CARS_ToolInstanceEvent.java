/*
 * Copyright 2007-2008 NLR - National Aerospace Laboratory
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jecars.tools;

import java.util.logging.Level;
import javax.jcr.Node;
import nl.msd.jdots.JD_Taglist;

/** CARS_ToolInstanceEvent
 *
 * @version $Id: CARS_ToolInstanceEvent.java,v 1.2 2009/01/14 16:08:43 weertj Exp $
 */
public interface CARS_ToolInstanceEvent {
  
  final static public int EVENTTYPE_UNKNOWN               = 0x00;
  final static public int EVENTTYPE_STATECHANGED          = 0x01;
  final static public int EVENTTYPE_GENERALEXCEPTION      = 0x02;
  final static public int EVENTTYPE_TOOLINSTANCEEXCEPTION = 0x03;
  final static public int EVENTTYPE_TOOLOUTPUTREPORT      = 0x04;
  final static public int EVENTTYPE_TOOLMESSAGE           = 0x05;
  final static public int EVENTTYPE_STATUSMESSAGE         = 0x06;
  final static public int EVENTTYPE_PROGRESS              = 0x07;
  
  /** Get the tool instance which generated this event
   * @return The tool instance
   */
  public CARS_ToolInterface getToolInstance();
  
  /** Get the state of the instance at the time this event was created
   * @return the STATE_*
   */
  public String getEventState();

  /** Get the exception of the tool instance, when event type is EVENTTYPE_GENERALEXCEPTION
   */
  public Throwable getEventException();
  
  /** Get event string value
   */
  public String getEventStringValue();

  /** Get event value
   *
   * @return
   */
  public double getEventValue();
  
  /** Get the type of this event
   * @return The type can be;
   *          EVENTTYPE_UNKNOWN               = Unknown event type
   *          EVENTTYPE_STATECHANGED          = The state of the tool instance is changed,
   *                                            call getEventState() for the new state
   *          EVENTTYPE_GENERALEXCEPTION      = A general exception occured within the tool instance.
   *                                            call getEventException() for the thrown exception.
   *          EVENTTYPE_TOOLINSTANCEEXCEPTION = A general exception occured within the tool instance external execution.
   *                                            call getEventException() for the thrown exception.
   *          EVENTTYPE_TOOLOUTPUTREPORT      = Output is generated by the tool getEventStringValue()
   *          EVENTTYPE_TOOLMESSAGE           = Message is generated by the tool getEventStringValue()
   *          EVENTTYPE_STATUSMESSAGE         = Short (1 line) message for user purpose
   *          EVENTTYPE_PROGRESS              = Simple tool completion progress percentage
   */
  int getEventType();
  
  /** Get the event level, eq. java.util.Logger.Level
   */
  Level getEventLevel();
  
  /** Is this a blocking event?
   */
  boolean getEventBlocking();
  
  void setEventNode( Node pNode );
  Node getEventNode();
  
}
